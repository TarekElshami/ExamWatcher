/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gavab.examwatcher;

import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author jvelez
 */
public class FinishExam extends javax.swing.JDialog {

    private static ArrayList<String> logMessages = new ArrayList<>();
    private String projectFolder;
    private CopyWatcher copyWatcher;

    /**
     * Creates new form FinishExam
     */
    public FinishExam(JFrame frame, ArrayList<String> logMessages, String projectFolder) {
        super(frame);
        this.logMessages = logMessages;
        this.projectFolder = projectFolder;
        initComponents();
        if (this.projectFolder != null && !this.projectFolder.isEmpty()) {
            jLabelDirName.setText(this.projectFolder);
        }
    }

    public void setCopyWatcher(CopyWatcher copyWatcher) {
        this.copyWatcher = copyWatcher;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTFName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        buttonGenerateZip = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBar = new javax.swing.JProgressBar();
        jLabelDirName = new javax.swing.JLabel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle"); // NOI18N
        setTitle(bundle.getString("GENERATE EXAMN DELIVERY FORM")); // NOI18N
        setAlwaysOnTop(true);

        jTFName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFNameKeyReleased(evt);
            }
        });

        jLabel1.setText(bundle.getString("STUDENT NAME")); // NOI18N

        jLabel2.setText(bundle.getString("EXAM PROJECT FOLDER")); // NOI18N

        jButton2.setText(bundle.getString("RETURN TO EXAM")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGenerateZip.setText(bundle.getString("GENERATE ZIP")); // NOI18N
        buttonGenerateZip.setToolTipText("rellene el nombre del alumno y seleccione el directorio");
        buttonGenerateZip.setEnabled(false);
        buttonGenerateZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGenerateZipActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("INSTRUCCIONES\n\n1 - Rellena tu nombre y apellidos.\n\n2 - Pulsa generar ZIP y selecciona un directorio para ubicarlo.\n\n3 - Comprueba que el ZIP contiene tu c√≥digo. En caso contrario vuelve a generar el ZIP.\n\n4 - Cierra el programa ExamWatcher.\n\n5 - Conecta el ordenador a Internet y sube el ZIP al aula virtual.\n");
        jScrollPane1.setViewportView(jTextArea1);

        jProgressBar.setStringPainted(true);

        jLabelDirName.setText("No dir name selected");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelDirName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonGenerateZip, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelDirName))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(buttonGenerateZip))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void showEndZipGeneration() {
        String ObjButtons[] = {java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle").getString("OK")};
        String message = java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle").getString("SUCCESSFULLY ZIP FILE GENERATION");
        String title = java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle").getString("ONLINE EXAMINATION SYSTEM");
        JOptionPane.showOptionDialog(this, message, title, JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, ObjButtons, ObjButtons[0]);
    }

    private void showErrorInZipGeneration(String errorEspecifico) {
        String ObjButtons[] = {java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle").getString("OK")};
        String message = java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle").getString("ERROR IN ZIP FILE GENERATION") + "\n" + errorEspecifico;
        String title = java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle").getString("ONLINE EXAMINATION SYSTEM");
        JOptionPane.showOptionDialog(this, message, title, JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, ObjButtons, ObjButtons[0]);
    }

    private void buttonGenerateZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGenerateZipActionPerformed
        final FinishExam mainFrame = this;
        try {
            final JFileChooser f = new JFileChooser();
            f.setDialogTitle(java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle").getString("SELECT A FOLDER TO PUT THE ZIP"));
            f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if (f.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                new Thread(new Runnable() {
                    public void run() {
                        mainFrame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        jProgressBar.setValue(0);
                        try {
                            if (copyWatcher != null) {
                                copyWatcher.setFinalizingExam(true);
                            }
                            String outputFile = f.getSelectedFile().getAbsolutePath() + "/ExamCode.zip";
                            
                            if (DirectoryRecursion(outputFile, projectFolder))
                                throw new RuntimeException(java.util.ResourceBundle.getBundle("com/gavab/examwatcher/Bundle").getString("DIRECTORY RECURSION ERROR"));
                            
                            zipFolder(projectFolder, outputFile);
                            showEndZipGeneration();
                        } catch (Exception ex) {
                            Logger.getLogger(ExamWatcher.class.getName()).log(Level.SEVERE, null, ex);
                            showErrorInZipGeneration(ex.getMessage());
                        } finally {
                            if (copyWatcher != null) {
                                copyWatcher.setFinalizingExam(false);
                            }
                        }
                        mainFrame.setCursor(Cursor.getDefaultCursor());
                    }

                    private boolean DirectoryRecursion(String outputFile, String projectFolder) {
                        if (outputFile.length() < projectFolder.length()) {
                            return false; // <-- No puede estar dentro si es m√°s corto
                        }
                        return projectFolder.equals(outputFile.substring(0, projectFolder.length()));
                    }
                }).start();
            }
        } catch (Exception ex) {
            Logger.getLogger(ExamWatcher.class.getName()).log(Level.SEVERE, null, ex);
            showErrorInZipGeneration(ex.getMessage());
            mainFrame.setCursor(Cursor.getDefaultCursor());
        }

        }//GEN-LAST:event_buttonGenerateZipActionPerformed

    private void jTFNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFNameKeyReleased
        if ((jTFName.getText().length() > 5) && (projectFolder != "")) {
            buttonGenerateZip.setEnabled(true);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTFNameKeyReleased

    int hashValue;
    int numFiles;

    private void zipFolder(String srcFolder, String destZipFile) throws Exception {
        jProgressBar.setValue(1);

        hashValue = 29366927;
        numFiles = 0;
        ZipOutputStream zip = null;
        FileOutputStream fileWriter = null;
        fileWriter = new FileOutputStream(destZipFile);
        zip = new ZipOutputStream(fileWriter);
        addFolderToZip("", srcFolder, zip);

        jProgressBar.setValue(numFiles + 1);
        jProgressBar.setValue(numFiles + 2);
        
        if (copyWatcher != null) {
            logMessages.addAll(copyWatcher.getCopyWatcherMessages());
        }
        //Final file with resume
        writeResumeFile(srcFolder + "/resume.txt");
        addFileToZip("", srcFolder + "/resume.txt", zip);

        //Delete the resume file
        File f = new File(srcFolder + "/resume.txt");
        f.delete();

        zip.flush();
        zip.close();

        jProgressBar.setValue(100);
        //messageLabel.setText("El fichero ZIP ha sido generado");
    }

    private void acumulate(byte[] buf, int len) {
        for (int cont = 0; cont < len; cont++) {
            final int mult = (cont % 2) == 0 ? 1 : 100;
            hashValue = hashValue + buf[cont] * mult;
        }
    }

    private void writeResumeFile(String fileName) throws IOException {
        FileWriter file = new FileWriter(fileName);
        file.write(jTFName.getText() + "\n");
        acumulate(jTFName.getText().getBytes(), jTFName.getText().getBytes().length);

        file.write("\nNum files: ");
        file.write(Integer.toString(numFiles) + "\n");

        file.write("\nLog messages:\n");
        for (String s : logMessages) {
            file.write(s + "\n");
        }
        hashValue = hashValue + logMessages.size();

        file.write("\nHash Value: ");
        file.write(Integer.toString(hashValue) + "\n");
        file.close();
    }

    private void addFileToZip(String path, String srcFile, ZipOutputStream zip)
            throws Exception {
        File folder = new File(srcFile);
        if (folder.isDirectory()) {
            addFolderToZip(path, srcFile, zip);
        } else {
            numFiles++;
            if (numFiles < 90) {
                jProgressBar.setValue(numFiles);
            }

            byte[] buf = new byte[4096];
            int len;
            FileInputStream in = new FileInputStream(srcFile);
            //messageLabel.setText("Generando fichero ZIP");

            zip.putNextEntry(new ZipEntry(path + "/" + folder.getName()));
            while ((len = in.read(buf)) > 0) {
                zip.write(buf, 0, len);
                acumulate(buf, len);
            }
        }
    }

    private void addFolderToZip(String path, String srcFolder, ZipOutputStream zip)
            throws Exception {
        File folder = new File(srcFolder);

        for (String fileName : folder.list()) {
            if (path.equals("")) {
                addFileToZip(folder.getName(), srcFolder + "/" + fileName, zip);
            } else {
                addFileToZip(path + "/" + folder.getName(), srcFolder + "/" + fileName, zip);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonGenerateZip;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelDirName;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFName;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
